from java.lang import System
from javax.swing import JPanel
from javax.swing import BorderFactory
from javax.swing import JScrollPane

from java.awt import Dimension
from java.awt import Color

from java.awt.event import ActionListener
from java.awt.event import KeyListener
from java.awt.event import ActionEvent
from java.awt.event import KeyEvent
from java.awt.event import KeyAdapter

from net.miginfocom.swing import MigLayout
from panel import Panel

from javax.swing import JPanel
from javax.swing import JTextPane
from javax.swing import JTextField

from console import *
import sys

class FakeOut():
	def __init__(self,outText):
		self.outText = outText

	def write(self,text):
		#dont print in here
		self.outText.setText(self.outText.getText() + text)

class ConsolePanel(Panel):
	
	outText = None
	outTextScroller = None
	nestedInputPanel = None
	inText = None
	directoryText = None

	def __init__(self):
<<<<<<< HEAD
		Panel.__init__(self)
		self.console = None
=======
		Panel.__init__(self, "insets 0 0 0 0")
>>>>>>> 6f0d330fdbff68b0c1e081dc3afd4884d1104096
		


	def initUI(self):

		#create the output text panel
		self.outText = JTextPane()
		self.outText.setEditable(False)
		self.outTextScroller = JScrollPane(self.outText)

		#create the input text box
		self.inText = JTextField()
		self.inText.setFocusTraversalKeysEnabled(False)

<<<<<<< HEAD
		self.inText.setText("")
		self.new_out = FakeOut(self.outText)
		import sys
		sys.stdout = self.new_out
		self.console = BashED_Console(stdin=None,stdout=self.new_out)

		inT = self.inText
		outT = self.outText
		class InputTextActionListener(ActionListener):

			def __init__(self,console):
				self.console = console
			def actionPerformed(self, e):
				outT.setText(outT.getText() + "\n" + inT.getText())
				self.console.onecmd(inT.getText())
				inT.setText(self.console.prompt)
=======
		#create the directory text box
		self.directoryText = JTextField()
		self.directoryText.setEditable(False)
		self.directoryText.setText("~/agent")

		#create the listener that fires when the 'return' key is pressed
		class InputTextActionListener(ActionListener):
			def actionPerformed(selfButton, e):
				#print self.getCommandText()
				self.outText.setText(self.outText.getText() + "\n" + self.inText.getText())
				self.setDirectoryText(self.outText.getText())
				self.inText.setText("")

		#create the listener that fires whenever a user hits a key
>>>>>>> 6f0d330fdbff68b0c1e081dc3afd4884d1104096
		class InputKeyActionListener(KeyAdapter):
			def __init__(self,console):
				self.console = console
			def keyReleased(self, k):
<<<<<<< HEAD
				if k.getKeyCode() == 9: #tab character
					inT.setText(self.console.tabcomplete(self,inT.getText()))
		self.inText.addActionListener(InputTextActionListener(self.console))
		self.inText.addKeyListener(InputKeyActionListener(self.console))
=======
				print str(k.getKeyCode()) + ":\t" + k.getKeyChar()

		#register the listeners
		self.inText.addActionListener(InputTextActionListener())
		self.inText.addKeyListener(InputKeyActionListener())
>>>>>>> 6f0d330fdbff68b0c1e081dc3afd4884d1104096

		#create a nested panel that will house the directory and the input text box
		self.nestedInputPanel = Panel("Insets 0 0 0 0")



	def addUI(self):
		self.add(self.outTextScroller, "cell 0 0, push, grow")
		self.add(self.nestedInputPanel, "cell 0 1, pushx, growx")
		self.nestedInputPanel.add(self.directoryText, "cell 0 0")
		self.nestedInputPanel.add(self.inText, "cell 1 0, spanx, pushx, growx")

	def setDirectoryText(self, dirText):
		self.directoryText.setText(dirText)
		self.nestedInputPanel.revalidate()
